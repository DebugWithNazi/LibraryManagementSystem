// <auto-generated />
using System;
using LibraryManagement.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250106062834_seed-sample-data")]
    partial class seedsampledata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Infrastructure.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8558ee9-4580-4c44-91d7-2a67b31c1d95",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfbofCD/IvYW7nT3YTpDYXIR5NxcHhEa5G7MbVyltMb7sew6SmA5KUNs2HdXs/0fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3ce68ee-5a92-4986-851f-930d749d5e6d",
                            TwoFactorEnabled = false,
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8377cbe9-d3d4-41ce-b302-31861705336e",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEBiAoLuqLeINGNMy7LjIPs4Rmfwl/48dJCkQEIKl61rNzTior4LTK+fV5+rGsk7HJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc5ca069-1a57-4493-b743-8a5c0552f927",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b8e62ff-647e-4bc3-a457-05855b2257fd",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "LIBRARYADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMyLTMe07aTRayVFBLOuOhKl4OYFyqGBR6V9tEchQ2WuuwqfOTUX0s1FxAhc8/EHZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d840fda0-1786-4e32-8d4f-04fd55131161",
                            TwoFactorEnabled = false,
                            UserName = "libraryadmin"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Infrastructure.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6243),
                            Author = "Harper Lee",
                            Edition = "1st",
                            Genre = "Fiction",
                            ISBN = "9780061120084",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 281,
                            PublicationYear = 1960,
                            Publisher = "J.B. Lippincott & Co.",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 2,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6249),
                            Author = "George Orwell",
                            Edition = "1st",
                            Genre = "Dystopian",
                            ISBN = "9780451524935",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 328,
                            PublicationYear = 1949,
                            Publisher = "Secker & Warburg",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 3,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6253),
                            Author = "Jane Austen",
                            Edition = "2nd",
                            Genre = "Romance",
                            ISBN = "9780141439518",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 279,
                            PublicationYear = 1813,
                            Publisher = "T. Egerton",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 4,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6265),
                            Author = "F. Scott Fitzgerald",
                            Edition = "1st",
                            Genre = "Fiction",
                            ISBN = "9780743273565",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 180,
                            PublicationYear = 1925,
                            Publisher = "Charles Scribner's Sons",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 5,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6269),
                            Author = "Herman Melville",
                            Edition = "1st",
                            Genre = "Adventure",
                            ISBN = "9780142437247",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 635,
                            PublicationYear = 1851,
                            Publisher = "Harper & Brothers",
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            Id = 6,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6274),
                            Author = "Leo Tolstoy",
                            Edition = "1st",
                            Genre = "Historical Fiction",
                            ISBN = "9780199232765",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 1225,
                            PublicationYear = 1869,
                            Publisher = "The Russian Messenger",
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 7,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6278),
                            Author = "J.D. Salinger",
                            Edition = "1st",
                            Genre = "Fiction",
                            ISBN = "9780316769488",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 277,
                            PublicationYear = 1951,
                            Publisher = "Little, Brown and Company",
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 8,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6288),
                            Author = "J.R.R. Tolkien",
                            Edition = "1st",
                            Genre = "Fantasy",
                            ISBN = "9780547928227",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 310,
                            PublicationYear = 1937,
                            Publisher = "George Allen & Unwin",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 9,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6292),
                            Author = "Fyodor Dostoevsky",
                            Edition = "1st",
                            Genre = "Psychological Fiction",
                            ISBN = "9780140449136",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 430,
                            PublicationYear = 1866,
                            Publisher = "The Russian Messenger",
                            Title = "Crime and Punishment"
                        },
                        new
                        {
                            Id = 10,
                            AddedAt = new DateTime(2025, 1, 6, 6, 28, 33, 235, DateTimeKind.Utc).AddTicks(6296),
                            Author = "Homer",
                            Edition = "1st",
                            Genre = "Epic Poetry",
                            ISBN = "9780140268867",
                            IsDeleted = false,
                            Language = "English",
                            PageCount = 541,
                            PublicationYear = -700,
                            Publisher = "Penguin Classics",
                            Title = "The Odyssey"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Infrastructure.Entities.BorrowRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BorrowRecords");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "101",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3",
                            RoleId = "101"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibraryManagement.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibraryManagement.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibraryManagement.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
